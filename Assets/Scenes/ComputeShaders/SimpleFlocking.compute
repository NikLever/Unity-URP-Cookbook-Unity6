#pragma kernel CSMain
#define GROUP_SIZE 256

struct Boid
{
	float3 position;
	float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidsBuffer[id.x];

	float3 separation = 0;
	float3 alignment = 0;
	float3 cohesion = flockPosition;

	uint nearbyCount = 1; // Add self that is ignored in loop
	
	for (int i = 0; i < boidsCount; i++)
	{
		if (i != int(id.x))
		{
			Boid tempBoid = boidsBuffer[i];
			float3 offset = boid.position - tempBoid.position;
			float dist = max(length(offset), 0.00001);
			if (dist < neighbourDistance)
			{
				separation += offset * (1.0/dist - 1.0/neighbourDistance);
				alignment += tempBoid.direction;
				cohesion += tempBoid.position;
				nearbyCount++;
			}
		}
	}

	float avg = 1.0 / nearbyCount;
	alignment *= avg;
	cohesion *= avg;
	cohesion = normalize(cohesion - boid.position);

	float3 direction = alignment + separation + cohesion;

	float prop = 0.94;
	boid.direction = lerp(direction, normalize(boid.direction), prop);
	boid.position += boid.direction * boidSpeed * deltaTime;

	boidsBuffer[id.x] = boid;
}


